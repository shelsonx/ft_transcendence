# Generated by Django 5.0.3 on 2024-04-22 01:26

import datetime
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
        ('user', '0002_rename_id_ref_user_id_reference'),
    ]

    operations = [
        migrations.CreateModel(
            name='MatchRules',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player_reach_points', models.PositiveSmallIntegerField(blank=True, default=11, null=True)),
                ('match_total_points', models.PositiveSmallIntegerField(blank=True, default=None, null=True)),
                ('max_duration', models.DurationField(blank=True, default=datetime.timedelta(seconds=180), null=True)),
            ],
            options={
                'verbose_name_plural': 'Match Rules',
                'db_table': 'core_match_rules',
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.tournament',),
        ),
        migrations.CreateModel(
            name='Elimination',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.tournament',),
        ),
        migrations.CreateModel(
            name='LeaguePlayoff',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.tournament',),
        ),
        migrations.CreateModel(
            name='RoundRobin',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.tournament',),
        ),
        migrations.AlterModelOptions(
            name='match',
            options={'ordering': ['match_datetime'], 'verbose_name_plural': 'Matches'},
        ),
        migrations.RenameField(
            model_name='match',
            old_name='datetime',
            new_name='match_datetime',
        ),
        migrations.AddField(
            model_name='tournament',
            name='matches',
            field=models.ManyToManyField(related_name='tournament', to='core.match'),
        ),
        migrations.AddField(
            model_name='tournament',
            name='number_of_players',
            field=models.PositiveSmallIntegerField(default=2),
        ),
        migrations.AddField(
            model_name='tournament',
            name='players',
            field=models.ManyToManyField(related_name='tournaments', to='user.user'),
        ),
        migrations.AddField(
            model_name='tournament',
            name='tournament_type',
            field=models.SmallIntegerField(choices=[(0, 'Challenge'), (1, 'Round-robin'), (2, 'Elimination'), (3, 'League with Playoff')], default=0, verbose_name='Tournament Type'),
        ),
        migrations.AlterField(
            model_name='match',
            name='status',
            field=models.SmallIntegerField(choices=[(0, 'Scheduled'), (1, 'Waiting players confirmation to beggin'), (2, 'Ongoing'), (3, 'Ended')], default=0, verbose_name='Match status'),
        ),
        migrations.AddConstraint(
            model_name='matchrules',
            constraint=models.CheckConstraint(check=models.Q(models.Q(models.Q(('player_reach_points__isnull', True), _negated=True), models.Q(('match_total_points__isnull', True), _negated=True), models.Q(('max_duration__isnull', True), _negated=True), _connector='OR')), name='all_rules_null', violation_error_message='At least one rule parameter must be setted'),
        ),
        migrations.AddField(
            model_name='match',
            name='rules',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='core.matchrules'),
        ),
        migrations.AddField(
            model_name='tournament',
            name='rules',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='tournament', to='core.matchrules'),
        ),
    ]
